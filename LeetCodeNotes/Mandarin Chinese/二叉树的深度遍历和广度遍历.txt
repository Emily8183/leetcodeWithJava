二叉树遍历方式分为深度优先遍历（Depth-First Search, DFS) 和广度优先遍历(Breadth-First Search, BFS)
.
DFS分为三种：
.
前序：中左右；
中序：左中右；
后序：左右中；
.
可以用递归（栈），也可以用非递归（迭代法）
.
LC144，LC145，LC94这三题是典型例子
.
【基本做题思路就是递归的三重曲】：
1）确认参数和返回值；
2）终止条件；这里是当遇到空节点（if cur==null)，则终止遍历；
3）单层逻辑
.
这三题就快快地过了，接下来是LC102，考察的是BFS
.
关键点是需要借助队列，记录当前层有几个元素，弹出当前层的元素，加入孩子/子结点
.
这一题有一个tricky的地方是需要通过int快照queue的长度，而不能直接queue.size() --
.
int是属于primitive(基础数据类型/原始数据类型)，copy by value, not by reference
.
使用 que.size() 赋值给 len 的目的是为了确保在内层 while 循环中遍历【当前层】的所有节点。这里的 len 表示当前层的节点数量。
.
每次外层 while 循环开始时，计算当前层的节点数并存储在 len 中。内层 while 循环则使用 len 变量确保我们只遍历当前层的节点，而不会受到新加入队列的节点影响。
.
常见的原始数据类型包括：
.
整数类型（int、long、short、byte）
浮点数类型（float、double）
字符类型（char）
布尔类型（boolean）