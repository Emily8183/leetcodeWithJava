链表： 

1）分类： 
单链表：每一个节点包含元素及指向下一个节点的指针； 
双链表：每节点除了数据域外，还有两个指针，分别指向前一个节点及后一个节点； 
循环列表：头节点和尾节点相连（参考题：LC141和LC142）；

2）存储方式：在内存中不是连续分布的，分配机制取决于操作系统的内存管理
（相反，数组是连续分布的数据结构）； 

3）时间复杂度： 
查找：O(n); 
访问：O(n); 
插入：O(1)，前一节点指向新节点，新节点指向下一节点； 
删除：O(1)，跳过该节点，前一节点直接指向下一节点；

4）链表的反转（LC206）：

注意：调整每个节点的指针方向，而不丢失链表的顺序。

关键点：

// while的终点是什么？当cur == null, 终止循环；

// 尾部是什么？反转后，原链表的尾部节点将成为新的头节点，即 pre。

// 如何保存交换值？在断开 cur.next 之前，需要先用 temp 保存它：temp = cur.next。

// 如何复制？向后移动节点时，pre 指向当前节点，cur 移动到下一节点：pre = cur;

此时cur到原来cur.next的位置，因为cur.next已经保存为temp，因此这里是 cur = temp;

// 注意顺序问题：必须先保存 cur.next，再调整 pre 和 cur，否则会丢失链表的剩余部分。

